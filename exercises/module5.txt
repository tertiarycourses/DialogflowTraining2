// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';
 
const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
 
 
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
 

  function welcome(agent) {
    agent.add(`Welcome to ABC Pizza Store!`);
  }

  function address_check(agent) {
      const location = agent.parameters.address;
    if (location=='Jurong') {
        agent.add("Sorry we dont deliver to ${location}");
    }
    else {
        agent.add("Yes, we will deliver to ${location}")
    }

  }
 

  // Run the proper function handler based on the matched Dialogflow intent name
  let intentMap = new Map();
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Delivery_Address_Intent', address_check);

  agent.handleRequest(intentMap);
});

# Ex: Fulfillment

// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';
 
const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
 
process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements
 
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
 
  function welcome(agent) {
    agent.add(`Welcome to my agent!`);
  }
 
  function fallback(agent) {
    agent.add(`I didn't understand`);
    agent.add(`I'm sorry, can you try again?`);
  }
  
  function getOrder(agent) {
    const waffleQuantity = agent.parameters.waffleQuantity;
    const waffleFlavor = agent.parameters.waffleFlavors;
    
    if (waffleQuantity < 1) {
        agent.add('Hey, You need to order at least 1 waffle. Select your')
        agent.add(new Suggestion(1));
        agent.add(new Suggestion(2));
        agent.add(new Suggestion(3));
    } else {
      agent.add(`Sure. ${waffleQuantity} ${waffleFlavor} waffle coming right up. How would you like to pay?`);
      agent.add(new Suggestion('Cash'));
      agent.add(new Suggestion('PayNow'));
    }
  }

  intentMap = new Map();
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Default Fallback Intent', fallback);
  intentMap.set('getOrder', getOrder);
  agent.handleRequest(intentMap);
});